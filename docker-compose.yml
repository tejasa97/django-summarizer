version: '3.4'

services:

  redis:
    image: "redis:alpine"
    container_name: "redis"
    restart: on-failure

  postgres:
    image: "postgres:12-alpine"
    container_name: postgres
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - "postgresql-data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    env_file:
        - ./.env
    restart: on-failure

  api_server: 
    image: "summarizer_api_server"
    build: ./
    command: >
      bash -c "./wait-for.sh postgres:5432 &&
      ./manage.py migrate &&
      ./manage.py runserver 0.0.0.0:8000"
    # volumes:
    #   - "./:/code"
    ports:
      - "8000:8000"
    depends_on:
      - "postgres"
      - "redis"
    env_file:
      - ./.env

  celery_worker:
    command: sh -c "./wait-for.sh redis:6379 && ./wait-for.sh api_server:8000 -- celery -A core worker -l info"
    container_name: celery_worker
    depends_on:
      - api_server
      - postgres
      - redis
    # deploy:
    #   replicas: 1
    #   restart_policy:
    #     condition: on-failure
    #   resources:
    #     limits:
    #       cpus: '0.50'
    #       memory: 50M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 20M
    hostname: celery_worker
    image: summarizer_api_server
    restart: on-failure
    env_file:
      - ./.env

  celery_beat:
    command: sh -c "./wait-for.sh redis:6379 && ./wait-for.sh api_server:8000 -- celery -A core beat -l info"
    container_name: celery_beat
    depends_on:
      - api_server
      - postgres
      - redis
    hostname: celery_beat
    image: summarizer_api_server
    restart: on-failure
    env_file:
      - ./.env

volumes:
  postgresql-data: